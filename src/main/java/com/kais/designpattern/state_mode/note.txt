代码实例使用背景：
    1.假设现在一个肥宅程序猿下班了，去自动售货机买「肥宅汽水」回去喝。自动售货机需要投币即可自动出售。

    2.默认初始化是「售罄状态」，添加汽水进入售货机后变成「没有硬币」状态。

    3.投入硬币则进入「有硬币」状态，判断是否有汽水，有则进入「售出状态」售出汽水，售出后还有剩余则恢复到「没有硬币」状态。
 否则将硬币退回，并且进入汽水「售罄状态」。

    4.现在我们可以抽象一个售货机充当 Context 角色，投币行为是 请求入口，投币后售货机会发生很多状态转换。状态分别有：
 售罄、有硬币、无硬币、售出。

    5.假如我们不用状态模式，那么就要写一堆判断条件。代码也不可拓展与维护。新增一种状态，要修改所有的代码。

    6.所有的请求都会委托到对应的状态类，环境角色拥有所有的状态类

状态模式总结：
    1.状态决定行为，将一个对象的各个状态进行分离，将每个状态对应的行为区分开
    2.各个状态内执行的步骤都是有可能影响到其它状态的
